{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/lib/types.ts"],"sourcesContent":["import type { LucideIcon } from 'lucide-react';\n// Removed: import type { Timestamp } from 'firebase/firestore';\n\nexport interface Category {\n  id: string;\n  name: string;\n  icon?: string; // Store Lucide icon name as string\n}\n\nexport interface Plant {\n  id: string;\n  name:string;\n  categoryId: string; \n  category?: Category; // Optional: for client-side convenience after resolving\n  imageUrl: string;\n  height: string; \n  watering: string; \n  uses: string; \n  light: string; \n  stock: number;\n  description?: string;\n  createdAt?: Date; // Changed from Timestamp\n  updatedAt?: Date; // Changed from Timestamp\n}\n\nexport interface CartItem extends Plant {\n  quantity: number;\n}\n\nexport interface OrderItem {\n  plantId: string;\n  plantName: string;\n  quantity: number;\n  price: number; // Assuming price is always 0 for now\n}\n\nexport interface Order {\n  id: string;\n  userName: string;\n  userEmail: string;\n  userPhone: string;\n  items: OrderItem[];\n  totalItems: number;\n  totalPrice: number; \n  status: \"open\" | \"closed\" | \"canceled\";\n  createdAt: Date; // Changed from Timestamp\n  updatedAt?: Date; // Changed from Timestamp\n  whatsappMessage?: string; \n}\n\nexport interface AppSettings {\n  id?: string; // Document ID in Firestore, e.g., \"current\"\n  nurseryName: string;\n  whatsappNumber: string;\n  nurseryEmail: string;\n}\n\n// Default settings, used as a fallback or initial state\nexport const defaultSettings: AppSettings = {\n  nurseryName: \"משתלת גל-עד\",\n  whatsappNumber: \"\", // Admin should fill this via settings page\n  nurseryEmail: \"\", // Admin should fill this via settings page\n};"],"names":[],"mappings":";;;AA0DO,MAAM,kBAA+B;IAC1C,aAAa;IACb,gBAAgB;IAChB,cAAc;AAChB","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/mongodbService.ts"],"sourcesContent":["import { MongoClient, Db } from 'mongodb';\n\nconst MONGODB_URI = 'mongodb+srv://amir:5OPBfitlnpv4zx6h@cluster0.w5zcbbu.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';\nconst DB_NAME = 'greendb';\n\nlet cachedClient: MongoClient | null = null;\nlet cachedDb: Db | null = null;\n\nexport async function connectToDatabase() {\n  if (cachedClient && cachedDb) {\n    return { client: cachedClient, db: cachedDb };\n  }\n\n  const client = await MongoClient.connect(MONGODB_URI);\n  const db = client.db(DB_NAME);\n\n  cachedClient = client;\n  cachedDb = db;\n\n  return { client, db };\n}\n\nexport async function getCollection(collectionName: string) {\n  const { db } = await connectToDatabase();\n  return db.collection(collectionName);\n}\n\nexport async function closeConnection() {\n  if (cachedClient) {\n    await cachedClient.close();\n    cachedClient = null;\n    cachedDb = null;\n  }\n} "],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,cAAc;AACpB,MAAM,UAAU;AAEhB,IAAI,eAAmC;AACvC,IAAI,WAAsB;AAEnB,eAAe;IACpB,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,MAAM,SAAS,MAAM,uGAAA,CAAA,cAAW,CAAC,OAAO,CAAC;IACzC,MAAM,KAAK,OAAO,EAAE,CAAC;IAErB,eAAe;IACf,WAAW;IAEX,OAAO;QAAE;QAAQ;IAAG;AACtB;AAEO,eAAe,cAAc,cAAsB;IACxD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,OAAO,GAAG,UAAU,CAAC;AACvB;AAEO,eAAe;IACpB,IAAI,cAAc;QAChB,MAAM,aAAa,KAAK;QACxB,eAAe;QACf,WAAW;IACb;AACF","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/settingsService.ts"],"sourcesContent":["'use server';\n// import { db } from '@/lib/firebase'; // Firebase import removed\nimport type { AppSettings } from '@/lib/types';\nimport { defaultSettings } from '@/lib/types'; // Import default settings\nimport { getCollection } from './mongodbService';\nimport { ObjectId } from 'mongodb';\n// import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore'; // Firebase imports removed\n\n// const SETTINGS_COLLECTION = 'settings';\n// const SETTINGS_DOC_ID = 'appConfig'; // Single document for all app settings\n\ninterface MongoSettings extends AppSettings {\n  _id: ObjectId;\n}\n\nconst SETTINGS_DOC_ID = 'appConfig';\n\nfunction mapMongoSettingsToSettings(mongoSettings: MongoSettings): AppSettings {\n  const { _id, ...settingsData } = mongoSettings;\n  return settingsData;\n}\n\n// Helper to simulate server-side delay and potential errors\nconst simulateApiCall = <T>(data: T, shouldFail = false): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldFail) {\n        reject(new Error(\"Simulated network error\"));\n      } else {\n        resolve(JSON.parse(JSON.stringify(data))); // Deep clone\n      }\n    }, 500);\n  });\n};\n\nexport async function getSettings(): Promise<AppSettings | null> {\n  const collection = await getCollection('settings');\n  const mongoSettings = await collection.findOne({ id: SETTINGS_DOC_ID }) as MongoSettings | null;\n  \n  if (mongoSettings) {\n    return mapMongoSettingsToSettings(mongoSettings);\n  }\n  \n  // If no settings exist, create default settings\n  const defaultMongoSettings: Omit<MongoSettings, '_id'> = {\n    ...defaultSettings,\n    id: SETTINGS_DOC_ID\n  };\n  \n  const result = await collection.insertOne(defaultMongoSettings);\n  const insertedSettings = await collection.findOne({ _id: result.insertedId }) as MongoSettings;\n  return mapMongoSettingsToSettings(insertedSettings);\n}\n\nexport async function updateSettings(settingsData: Partial<Omit<AppSettings, 'id'>>): Promise<void> {\n  const collection = await getCollection('settings');\n  const result = await collection.updateOne(\n    { id: SETTINGS_DOC_ID },\n    { $set: settingsData },\n    { upsert: true }\n  );\n  \n  if (result.matchedCount === 0 && !result.upsertedId) {\n    throw new Error(\"Failed to update settings\");\n  }\n}\n\n// Function to reset settings to default\nexport async function resetSettings(): Promise<void> {\n  const collection = await getCollection('settings');\n  await collection.updateOne(\n    { id: SETTINGS_DOC_ID },\n    { $set: { ...defaultSettings, id: SETTINGS_DOC_ID } },\n    { upsert: true }\n  );\n}"],"names":[],"mappings":";;;;;;;AAGA,wMAA+C,0BAA0B;AACzE;;;;;;AAWA,MAAM,kBAAkB;AAExB,SAAS,2BAA2B,aAA4B;IAC9D,MAAM,EAAE,GAAG,EAAE,GAAG,cAAc,GAAG;IACjC,OAAO;AACT;AAEA,4DAA4D;AAC5D,MAAM,kBAAkB,CAAI,MAAS,aAAa,KAAK;IACrD,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,WAAW;YACT,IAAI,YAAY;gBACd,OAAO,IAAI,MAAM;YACnB,OAAO;gBACL,QAAQ,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,SAAS,aAAa;YAC1D;QACF,GAAG;IACL;AACF;AAEO,eAAe,uCAAS,GAAT;IACpB,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,gBAAgB,MAAM,WAAW,OAAO,CAAC;QAAE,IAAI;IAAgB;IAErE,IAAI,eAAe;QACjB,OAAO,2BAA2B;IACpC;IAEA,gDAAgD;IAChD,MAAM,uBAAmD;QACvD,GAAG,mHAAA,CAAA,kBAAe;QAClB,IAAI;IACN;IAEA,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;IAC1C,MAAM,mBAAmB,MAAM,WAAW,OAAO,CAAC;QAAE,KAAK,OAAO,UAAU;IAAC;IAC3E,OAAO,2BAA2B;AACpC;AAEO,eAAe,uCAAY,GAAZ,eAAe,YAA8C;IACjF,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,SAAS,MAAM,WAAW,SAAS,CACvC;QAAE,IAAI;IAAgB,GACtB;QAAE,MAAM;IAAa,GACrB;QAAE,QAAQ;IAAK;IAGjB,IAAI,OAAO,YAAY,KAAK,KAAK,CAAC,OAAO,UAAU,EAAE;QACnD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,uCAAW,GAAX;IACpB,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,WAAW,SAAS,CACxB;QAAE,IAAI;IAAgB,GACtB;QAAE,MAAM;YAAE,GAAG,mHAAA,CAAA,kBAAe;YAAE,IAAI;QAAgB;IAAE,GACpD;QAAE,QAAQ;IAAK;AAEnB;;;IAxCsB;IAmBA;IAcA;;AAjCA,+OAAA;AAmBA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/categoryService.ts"],"sourcesContent":["'use server';\nimport type { Category } from '@/lib/types';\nimport { getCollection } from './mongodbService';\nimport { ObjectId } from 'mongodb';\n\ninterface MongoCategory extends Category {\n  _id: ObjectId;\n}\n\nfunction mapMongoCategoryToCategory(mongoCategory: MongoCategory): Category {\n  const { _id, ...categoryData } = mongoCategory;\n  return categoryData;\n}\n\nexport async function getCategories(): Promise<Category[]> {\n  const collection = await getCollection('categories');\n  const mongoCategories = await collection.find({}).toArray() as MongoCategory[];\n  return mongoCategories.map(mapMongoCategoryToCategory);\n}\n\nexport async function addCategory(categoryData: Omit<Category, 'id'>): Promise<Category> {\n  const collection = await getCollection('categories');\n  const newCategory: Omit<MongoCategory, '_id'> = {\n    id: categoryData.name.toLowerCase().replace(/\\s+/g, '-') || `category-${Date.now()}`,\n    ...categoryData\n  };\n\n  const result = await collection.insertOne(newCategory);\n  const insertedCategory = await collection.findOne({ _id: result.insertedId }) as MongoCategory;\n  return mapMongoCategoryToCategory(insertedCategory);\n}\n\nexport async function updateCategory(categoryId: string, categoryData: Partial<Omit<Category, 'id'>>): Promise<void> {\n  const collection = await getCollection('categories');\n  const result = await collection.updateOne(\n    { id: categoryId },\n    { $set: categoryData }\n  );\n  \n  if (result.matchedCount === 0) {\n    throw new Error(\"Category not found\");\n  }\n}\n\nexport async function deleteCategory(categoryId: string): Promise<void> {\n  const collection = await getCollection('categories');\n  const result = await collection.deleteOne({ id: categoryId });\n  \n  if (result.deletedCount === 0) {\n    throw new Error(\"Category not found for deletion\");\n  }\n}\n\nexport async function clearCachedCategories(): Promise<void> {\n  // No need to clear cache as we're using MongoDB directly\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA;;;;;AAOA,SAAS,2BAA2B,aAA4B;IAC9D,MAAM,EAAE,GAAG,EAAE,GAAG,cAAc,GAAG;IACjC,OAAO;AACT;AAEO,eAAe,uCAAW,GAAX;IACpB,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,kBAAkB,MAAM,WAAW,IAAI,CAAC,CAAC,GAAG,OAAO;IACzD,OAAO,gBAAgB,GAAG,CAAC;AAC7B;AAEO,eAAe,uCAAS,GAAT,YAAY,YAAkC;IAClE,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,cAA0C;QAC9C,IAAI,aAAa,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,QAAQ,CAAC,SAAS,EAAE,KAAK,GAAG,IAAI;QACpF,GAAG,YAAY;IACjB;IAEA,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;IAC1C,MAAM,mBAAmB,MAAM,WAAW,OAAO,CAAC;QAAE,KAAK,OAAO,UAAU;IAAC;IAC3E,OAAO,2BAA2B;AACpC;AAEO,eAAe,uCAAY,GAAZ,eAAe,UAAkB,EAAE,YAA2C;IAClG,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,SAAS,MAAM,WAAW,SAAS,CACvC;QAAE,IAAI;IAAW,GACjB;QAAE,MAAM;IAAa;IAGvB,IAAI,OAAO,YAAY,KAAK,GAAG;QAC7B,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,uCAAY,GAAZ,eAAe,UAAkB;IACrD,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;QAAE,IAAI;IAAW;IAE3D,IAAI,OAAO,YAAY,KAAK,GAAG;QAC7B,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,uCAAmB,GAAnB;AACpB,yDAAyD;AAC3D;;;IAzCsB;IAMA;IAYA;IAYA;IASA;;AAvCA,+OAAA;AAMA,+OAAA;AAYA,+OAAA;AAYA,+OAAA;AASA,+OAAA","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/app/admin/categories/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/categories/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/categories/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/app/admin/categories/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/categories/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/categories/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}