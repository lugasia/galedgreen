{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/lib/types.ts"],"sourcesContent":["import type { LucideIcon } from 'lucide-react';\n// Removed: import type { Timestamp } from 'firebase/firestore';\n\nexport interface Category {\n  id: string;\n  name: string;\n  icon?: string; // Store Lucide icon name as string\n}\n\nexport interface Plant {\n  id: string;\n  name:string;\n  categoryId: string; \n  category?: Category; // Optional: for client-side convenience after resolving\n  imageUrl: string;\n  height: string; \n  watering: string; \n  uses: string; \n  light: string; \n  stock: number;\n  description?: string;\n  createdAt?: Date; // Changed from Timestamp\n  updatedAt?: Date; // Changed from Timestamp\n}\n\nexport interface CartItem extends Plant {\n  quantity: number;\n}\n\nexport interface OrderItem {\n  plantId: string;\n  plantName: string;\n  quantity: number;\n  price: number; // Assuming price is always 0 for now\n}\n\nexport interface Order {\n  id: string;\n  userName: string;\n  userEmail: string;\n  userPhone: string;\n  items: OrderItem[];\n  totalItems: number;\n  totalPrice: number; \n  status: \"open\" | \"closed\" | \"canceled\";\n  createdAt: Date; // Changed from Timestamp\n  updatedAt?: Date; // Changed from Timestamp\n  whatsappMessage?: string; \n}\n\nexport interface AppSettings {\n  id?: string; // Document ID in Firestore, e.g., \"current\"\n  nurseryName: string;\n  whatsappNumber: string;\n  nurseryEmail: string;\n}\n\n// Default settings, used as a fallback or initial state\nexport const defaultSettings: AppSettings = {\n  nurseryName: \"משתלת גל-עד\",\n  whatsappNumber: \"\", // Admin should fill this via settings page\n  nurseryEmail: \"\", // Admin should fill this via settings page\n};"],"names":[],"mappings":";;;AA0DO,MAAM,kBAA+B;IAC1C,aAAa;IACb,gBAAgB;IAChB,cAAc;AAChB","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/mongodbService.ts"],"sourcesContent":["import { MongoClient, Db } from 'mongodb';\n\nconst MONGODB_URI = 'mongodb+srv://amir:5OPBfitlnpv4zx6h@cluster0.w5zcbbu.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';\nconst DB_NAME = 'greendb';\n\nlet cachedClient: MongoClient | null = null;\nlet cachedDb: Db | null = null;\n\nexport async function connectToDatabase() {\n  if (cachedClient && cachedDb) {\n    return { client: cachedClient, db: cachedDb };\n  }\n\n  const client = await MongoClient.connect(MONGODB_URI);\n  const db = client.db(DB_NAME);\n\n  cachedClient = client;\n  cachedDb = db;\n\n  return { client, db };\n}\n\nexport async function getCollection(collectionName: string) {\n  const { db } = await connectToDatabase();\n  return db.collection(collectionName);\n}\n\nexport async function closeConnection() {\n  if (cachedClient) {\n    await cachedClient.close();\n    cachedClient = null;\n    cachedDb = null;\n  }\n} "],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,cAAc;AACpB,MAAM,UAAU;AAEhB,IAAI,eAAmC;AACvC,IAAI,WAAsB;AAEnB,eAAe;IACpB,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,MAAM,SAAS,MAAM,uGAAA,CAAA,cAAW,CAAC,OAAO,CAAC;IACzC,MAAM,KAAK,OAAO,EAAE,CAAC;IAErB,eAAe;IACf,WAAW;IAEX,OAAO;QAAE;QAAQ;IAAG;AACtB;AAEO,eAAe,cAAc,cAAsB;IACxD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,OAAO,GAAG,UAAU,CAAC;AACvB;AAEO,eAAe;IACpB,IAAI,cAAc;QAChB,MAAM,aAAa,KAAK;QACxB,eAAe;QACf,WAAW;IACb;AACF","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/settingsService.ts"],"sourcesContent":["'use server';\n// import { db } from '@/lib/firebase'; // Firebase import removed\nimport type { AppSettings } from '@/lib/types';\nimport { defaultSettings } from '@/lib/types'; // Import default settings\nimport { getCollection } from './mongodbService';\nimport { ObjectId } from 'mongodb';\n// import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore'; // Firebase imports removed\n\n// const SETTINGS_COLLECTION = 'settings';\n// const SETTINGS_DOC_ID = 'appConfig'; // Single document for all app settings\n\ninterface MongoSettings extends AppSettings {\n  _id: ObjectId;\n}\n\nconst SETTINGS_DOC_ID = 'appConfig';\n\nfunction mapMongoSettingsToSettings(mongoSettings: MongoSettings): AppSettings {\n  const { _id, ...settingsData } = mongoSettings;\n  return settingsData;\n}\n\n// Helper to simulate server-side delay and potential errors\nconst simulateApiCall = <T>(data: T, shouldFail = false): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldFail) {\n        reject(new Error(\"Simulated network error\"));\n      } else {\n        resolve(JSON.parse(JSON.stringify(data))); // Deep clone\n      }\n    }, 500);\n  });\n};\n\nexport async function getSettings(): Promise<AppSettings | null> {\n  const collection = await getCollection('settings');\n  const mongoSettings = await collection.findOne({ id: SETTINGS_DOC_ID }) as MongoSettings | null;\n  \n  if (mongoSettings) {\n    return mapMongoSettingsToSettings(mongoSettings);\n  }\n  \n  // If no settings exist, create default settings\n  const defaultMongoSettings: Omit<MongoSettings, '_id'> = {\n    ...defaultSettings,\n    id: SETTINGS_DOC_ID\n  };\n  \n  const result = await collection.insertOne(defaultMongoSettings);\n  const insertedSettings = await collection.findOne({ _id: result.insertedId }) as MongoSettings;\n  return mapMongoSettingsToSettings(insertedSettings);\n}\n\nexport async function updateSettings(settingsData: Partial<Omit<AppSettings, 'id'>>): Promise<void> {\n  const collection = await getCollection('settings');\n  const result = await collection.updateOne(\n    { id: SETTINGS_DOC_ID },\n    { $set: settingsData },\n    { upsert: true }\n  );\n  \n  if (result.matchedCount === 0 && !result.upsertedId) {\n    throw new Error(\"Failed to update settings\");\n  }\n}\n\n// Function to reset settings to default\nexport async function resetSettings(): Promise<void> {\n  const collection = await getCollection('settings');\n  await collection.updateOne(\n    { id: SETTINGS_DOC_ID },\n    { $set: { ...defaultSettings, id: SETTINGS_DOC_ID } },\n    { upsert: true }\n  );\n}"],"names":[],"mappings":";;;;;;;AAGA,wMAA+C,0BAA0B;AACzE;;;;;;AAWA,MAAM,kBAAkB;AAExB,SAAS,2BAA2B,aAA4B;IAC9D,MAAM,EAAE,GAAG,EAAE,GAAG,cAAc,GAAG;IACjC,OAAO;AACT;AAEA,4DAA4D;AAC5D,MAAM,kBAAkB,CAAI,MAAS,aAAa,KAAK;IACrD,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,WAAW;YACT,IAAI,YAAY;gBACd,OAAO,IAAI,MAAM;YACnB,OAAO;gBACL,QAAQ,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,SAAS,aAAa;YAC1D;QACF,GAAG;IACL;AACF;AAEO,eAAe,uCAAS,GAAT;IACpB,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,gBAAgB,MAAM,WAAW,OAAO,CAAC;QAAE,IAAI;IAAgB;IAErE,IAAI,eAAe;QACjB,OAAO,2BAA2B;IACpC;IAEA,gDAAgD;IAChD,MAAM,uBAAmD;QACvD,GAAG,mHAAA,CAAA,kBAAe;QAClB,IAAI;IACN;IAEA,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;IAC1C,MAAM,mBAAmB,MAAM,WAAW,OAAO,CAAC;QAAE,KAAK,OAAO,UAAU;IAAC;IAC3E,OAAO,2BAA2B;AACpC;AAEO,eAAe,uCAAY,GAAZ,eAAe,YAA8C;IACjF,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,SAAS,MAAM,WAAW,SAAS,CACvC;QAAE,IAAI;IAAgB,GACtB;QAAE,MAAM;IAAa,GACrB;QAAE,QAAQ;IAAK;IAGjB,IAAI,OAAO,YAAY,KAAK,KAAK,CAAC,OAAO,UAAU,EAAE;QACnD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,uCAAW,GAAX;IACpB,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,WAAW,SAAS,CACxB;QAAE,IAAI;IAAgB,GACtB;QAAE,MAAM;YAAE,GAAG,mHAAA,CAAA,kBAAe;YAAE,IAAI;QAAgB;IAAE,GACpD;QAAE,QAAQ;IAAK;AAEnB;;;IAxCsB;IAmBA;IAcA;;AAjCA,+OAAA;AAmBA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/categoryService.ts"],"sourcesContent":["'use server';\nimport type { Category } from '@/lib/types';\nimport { getCollection } from './mongodbService';\nimport { ObjectId } from 'mongodb';\n\ninterface MongoCategory extends Category {\n  _id: ObjectId;\n}\n\nfunction mapMongoCategoryToCategory(mongoCategory: MongoCategory): Category {\n  const { _id, ...categoryData } = mongoCategory;\n  return categoryData;\n}\n\nexport async function getCategories(): Promise<Category[]> {\n  const collection = await getCollection('categories');\n  const mongoCategories = await collection.find({}).toArray() as MongoCategory[];\n  return mongoCategories.map(mapMongoCategoryToCategory);\n}\n\nexport async function addCategory(categoryData: Omit<Category, 'id'>): Promise<Category> {\n  const collection = await getCollection('categories');\n  const newCategory: Omit<MongoCategory, '_id'> = {\n    id: categoryData.name.toLowerCase().replace(/\\s+/g, '-') || `category-${Date.now()}`,\n    ...categoryData\n  };\n\n  const result = await collection.insertOne(newCategory);\n  const insertedCategory = await collection.findOne({ _id: result.insertedId }) as MongoCategory;\n  return mapMongoCategoryToCategory(insertedCategory);\n}\n\nexport async function updateCategory(categoryId: string, categoryData: Partial<Omit<Category, 'id'>>): Promise<void> {\n  const collection = await getCollection('categories');\n  const result = await collection.updateOne(\n    { id: categoryId },\n    { $set: categoryData }\n  );\n  \n  if (result.matchedCount === 0) {\n    throw new Error(\"Category not found\");\n  }\n}\n\nexport async function deleteCategory(categoryId: string): Promise<void> {\n  const collection = await getCollection('categories');\n  const result = await collection.deleteOne({ id: categoryId });\n  \n  if (result.deletedCount === 0) {\n    throw new Error(\"Category not found for deletion\");\n  }\n}\n\nexport async function clearCachedCategories(): Promise<void> {\n  // No need to clear cache as we're using MongoDB directly\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA;;;;;AAOA,SAAS,2BAA2B,aAA4B;IAC9D,MAAM,EAAE,GAAG,EAAE,GAAG,cAAc,GAAG;IACjC,OAAO;AACT;AAEO,eAAe,uCAAW,GAAX;IACpB,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,kBAAkB,MAAM,WAAW,IAAI,CAAC,CAAC,GAAG,OAAO;IACzD,OAAO,gBAAgB,GAAG,CAAC;AAC7B;AAEO,eAAe,uCAAS,GAAT,YAAY,YAAkC;IAClE,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,cAA0C;QAC9C,IAAI,aAAa,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,QAAQ,CAAC,SAAS,EAAE,KAAK,GAAG,IAAI;QACpF,GAAG,YAAY;IACjB;IAEA,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;IAC1C,MAAM,mBAAmB,MAAM,WAAW,OAAO,CAAC;QAAE,KAAK,OAAO,UAAU;IAAC;IAC3E,OAAO,2BAA2B;AACpC;AAEO,eAAe,uCAAY,GAAZ,eAAe,UAAkB,EAAE,YAA2C;IAClG,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,SAAS,MAAM,WAAW,SAAS,CACvC;QAAE,IAAI;IAAW,GACjB;QAAE,MAAM;IAAa;IAGvB,IAAI,OAAO,YAAY,KAAK,GAAG;QAC7B,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,uCAAY,GAAZ,eAAe,UAAkB;IACrD,MAAM,aAAa,MAAM,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;QAAE,IAAI;IAAW;IAE3D,IAAI,OAAO,YAAY,KAAK,GAAG;QAC7B,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,uCAAmB,GAAnB;AACpB,yDAAyD;AAC3D;;;IAzCsB;IAMA;IAYA;IAYA;IASA;;AAvCA,+OAAA;AAMA,+OAAA;AAYA,+OAAA;AAYA,+OAAA;AASA,+OAAA","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/services/plantService.ts"],"sourcesContent":["'use server';\nimport type { Plant, Category } from '@/lib/types';\nimport { getCollection } from './mongodbService';\nimport { getCategories as getCategoriesFromService, clearCachedCategories } from './categoryService';\nimport { ObjectId } from 'mongodb';\n\ninterface RawPlantData {\n  Name?: string;\n  Category?: string;\n  \"גובה\"?: string;\n  \"השקיה\"?: string;\n  \"שימושים\"?: string;\n  Tag?: string;\n  Stock?: string;\n  Thumbnail?: string;\n}\n\ninterface MongoPlant extends Plant {\n  _id: ObjectId;\n}\n\nlet allCategories: Category[] | null = null;\n\nasync function getCategoryMap(): Promise<Map<string, string>> {\n  const categories = await getCategoriesFromService();\n  return new Map(categories.map(cat => [cat.name, cat.id]));\n}\n\nfunction mapMongoPlantToPlant(mongoPlant: MongoPlant): Plant {\n  const { _id, ...plantData } = mongoPlant;\n  return plantData;\n}\n\nexport async function getPlants(): Promise<Plant[]> {\n  const collection = await getCollection('plants');\n  const mongoPlants = await collection.find({}).toArray() as MongoPlant[];\n  return mongoPlants.map(mapMongoPlantToPlant);\n}\n\nexport async function getPlantsWithCategories(): Promise<Plant[]> {\n  const collection = await getCollection('plants');\n  const mongoPlants = await collection.find({}).toArray() as MongoPlant[];\n  const categories = await getCategoriesFromService();\n  const categoryMap = new Map(categories.map(cat => [cat.id, cat]));\n  const defaultCategoryForDisplay = { id: \"unknown\", name: \"לא משויך\", icon: \"Tags\" };\n\n  return mongoPlants.map(mongoPlant => {\n    const plant = mapMongoPlantToPlant(mongoPlant);\n    return {\n      ...plant,\n      category: categoryMap.get(plant.categoryId) || { ...defaultCategoryForDisplay, id: plant.categoryId },\n    };\n  });\n}\n\nexport async function getPlantById(plantId: string): Promise<Plant | null> {\n  const collection = await getCollection('plants');\n  const mongoPlant = await collection.findOne({ id: plantId }) as MongoPlant | null;\n  if (mongoPlant) {\n    const plant = mapMongoPlantToPlant(mongoPlant);\n    const categories = await getCategoriesFromService();\n    const categoryMap = new Map(categories.map(cat => [cat.id, cat]));\n    const defaultCategoryForDisplay = { id: \"unknown\", name: \"לא משויך\", icon: \"Tags\" };\n    return { ...plant, category: categoryMap.get(plant.categoryId) || { ...defaultCategoryForDisplay, id: plant.categoryId } };\n  }\n  return null;\n}\n\nexport async function addPlant(plantData: Omit<Plant, 'id' | 'category' | 'createdAt' | 'updatedAt'>): Promise<Plant> {\n  const collection = await getCollection('plants');\n  const newPlant: Omit<MongoPlant, '_id'> = {\n    ...plantData,\n    id: `${plantData.name.toLowerCase().replace(/\\s+/g, '-')}-${Date.now()}`,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n  \n  const result = await collection.insertOne(newPlant);\n  const insertedPlant = await collection.findOne({ _id: result.insertedId }) as MongoPlant;\n  const plant = mapMongoPlantToPlant(insertedPlant);\n  const category = (await getCategoriesFromService()).find(c => c.id === plant.categoryId);\n  const defaultCategoryForDisplay = { id: \"unknown\", name: \"לא משויך\", icon: \"Tags\" };\n  return { ...plant, category: category || { ...defaultCategoryForDisplay, id: plant.categoryId } };\n}\n\nexport async function updatePlant(plantId: string, plantData: Partial<Omit<Plant, 'id' | 'category' | 'createdAt' | 'updatedAt'>>): Promise<void> {\n  const collection = await getCollection('plants');\n  const result = await collection.updateOne(\n    { id: plantId },\n    { $set: { ...plantData, updatedAt: new Date() } }\n  );\n  \n  if (result.matchedCount === 0) {\n    throw new Error(\"Plant not found for update\");\n  }\n}\n\nexport async function deletePlant(plantId: string): Promise<void> {\n  const collection = await getCollection('plants');\n  const result = await collection.deleteOne({ id: plantId });\n  \n  if (result.deletedCount === 0) {\n    throw new Error(\"Plant not found for deletion\");\n  }\n}\n\nexport async function importPlantsFromJson(jsonData: RawPlantData[]): Promise<void> {\n  const collection = await getCollection('plants');\n  const categoryMap = await getCategoryMap();\n  const defaultCategory = (await getCategoriesFromService()).find(cat => cat.name.toLowerCase() === \"uncategorized\") || \n                         (await getCategoriesFromService())[0];\n  const defaultCategoryId = defaultCategory.id;\n\n  const plants = jsonData\n    .map((item, index) => {\n      const plantName = item.Name?.trim();\n      if (!plantName) return null;\n\n      const categoryName = item.Category?.trim();\n      let categoryId = categoryName ? categoryMap.get(categoryName) : defaultCategoryId;\n      \n      if (!categoryId && categoryName) {\n        console.warn(`Plant \"${plantName}\" has category \"${categoryName}\" but no matching ID found. Assigning to default category \"${defaultCategory.name}\".`);\n        categoryId = defaultCategoryId;\n      } else if (!categoryId && !categoryName) {\n        categoryId = defaultCategoryId;\n      }\n      \n      let stock = 0;\n      if (item.Stock !== undefined && item.Stock !== null && String(item.Stock).trim() !== '') {\n        const parsedStock = parseInt(String(item.Stock), 10);\n        if (!isNaN(parsedStock)) {\n          stock = parsedStock;\n        }\n      }\n\n      let imageUrl = `https://picsum.photos/seed/${encodeURIComponent(plantName)}/400/300`;\n      const rawThumbnail = item.Thumbnail;\n      if (rawThumbnail) {\n        let cleanedThumbnail = String(rawThumbnail).replace(/[\\n\\r]+/g, ' ').trim();\n        if (cleanedThumbnail && (cleanedThumbnail.startsWith('http://') || cleanedThumbnail.startsWith('https://'))) {\n          try {\n            new URL(cleanedThumbnail);\n            imageUrl = cleanedThumbnail;\n          } catch (e) {\n            console.warn(`Invalid URL structure for plant \"${plantName}\" thumbnail: \"${cleanedThumbnail}\". Using placeholder.`);\n          }\n        }\n      }\n      \n      return {\n        id: `${plantName.toLowerCase().replace(/\\s+/g, '-')}-${index}`,\n        name: plantName,\n        categoryId: categoryId || defaultCategoryId,\n        imageUrl: imageUrl,\n        height: item[\"גובה\"]?.trim() || 'N/A',\n        watering: item[\"השקיה\"]?.trim() || 'N/A',\n        uses: item[\"שימושים\"]?.trim() || 'N/A',\n        light: item.Tag?.trim() || 'N/A',\n        stock: stock,\n        description: item[\"שימושים\"]?.trim() || '',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    })\n    .filter(plant => plant !== null) as Omit<MongoPlant, '_id'>[];\n\n  if (plants.length > 0) {\n    await collection.insertMany(plants);\n  }\n}\n\nexport async function clearCachedPlantData(): Promise<void> {\n  allCategories = null;\n  await clearCachedCategories();\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///Users/amirlugasi/greendb/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}